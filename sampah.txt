const express = require("express");
const axios = require("axios");

// axios
//   .get("https://jsonplaceholder.typicode.com/users")
//   .then((res) => res.data)
//   .then((json) => {
//     console.log("First user in the array:");
//     console.log(json[0]);
//     console.log("Name of the first user in the array:");
//     console.log(json[0].name);
//   });

const { uri, creatHeader } = require("./ambilSigna");

const app = express();
app.listen(3000, () => console.log("listening at 3000"));

// app.get("/poli/:nmpoli", async (request, response) => {
//   console.log("cari poli");
//   const nmpoli = request.params.nmpoli;
//   //const api_url ="https://new-api.bpjs-kesehatan.go.id:8080/new-vclaim-rest/referensi/poli/ICU";
//   const api_url = `${uri}/referensi/poli/${nmpoli}`;
//   const ambil_resp = await axios(api_url, {
//     method: "GET", // *GET, POST, PUT, DELETE, etc.
//     headers: creatHeader(),
//   });
//   const dataku = await ambil_resp.response;
//   response.json(dataku);
//   console.log(JSON.stringify(dataku));
//   console.log("selesai");
// });

app.get("/jadwaldokter", async (request, response) => {
  console.log("cari poli");
  //const nmpoli = request.params.nmpoli;
  //const api_url ="https://new-api.bpjs-kesehatan.go.id:8080/new-vclaim-rest/referensi/poli/ICU";
  //const api_url = `${uri}jadwaldokter/kodepoli/ANA/tanggal/2021-09-20`;
  //dashboard/waktutunggu/tanggal/{tanggal}/waktu/{waktu}
  const api_url = `${uri}dashboard/waktutunggu/tanggal/2021-09-10/waktu/1`;
  console.log(api_url);
  axios
    .get(api_url, {
      headers: creatHeader(),
    })
    .then((response) => {
      console.log("Data: ", response.data);
      console.log("status: ", response.status);
      console.log("statusText: ", response.statusText);
      console.log("headers: ", response.headers);
      console.log("config: ", response.config);
      //   const dataMeta = data.metaData;
      //   console.log(dataMeta);
      //   const dataRespon = data.response;
      //   console.log(JSON.stringify(dataRespon));
    })
    .catch(function (error) {
      // handle error
      console.log("status: ", error.response);
      //   console.log("status: ", error.response.status);
      //   console.log("statusText: ", error.response.statusText);
      //   console.log("statusText: ", error.response.config);
    })
    .then((response) => {
      console.log("selesai");
    });
});

app.get("/peserta", async (request, response) => {
  console.log("cari poli");
  //Peserta/".$jenis."/".$nomor."/tglSEP/".$tanggal
  const api_url = `${uri}referensi/poli/ICU`;
  console.log(api_url);
  axios
    .get(api_url, {
      headers: creatHeader(),
    })
    .then((response) => {
      console.log("response: ", response.data.response);
      //console.log("Data: ", response.data);
      console.log("status: ", response.status);
      console.log("statusText: ", response.statusText);
      //console.log("headers: ", response.headers);
      //console.log("config: ", response.config);
      //   const dataMeta = data.metaData;
      //   console.log(dataMeta);
      //   const dataRespon = data.response;
      //   console.log(JSON.stringify(dataRespon));
    })
    .catch(function (error) {
      // handle error
      console.log("status: ", error.response);
      //   console.log("status: ", error.response.status);
      //   console.log("statusText: ", error.response.statusText);
      //   console.log("statusText: ", error.response.config);
    })
    .then((response) => {
      console.log("selesai");
    });
});


###
GET http://localhost:3000/jadwaldokter

###
GET http://localhost:3000/peserta



"use strick";

const crypto = require("crypto");
const dotenv = require("dotenv");
dotenv.config();

const creatHeader = () => {
  const consId = process.env.CONSID;
  const secret = process.env.SECRET;
  const user_key = process.env.USER_KEY;
  const tStamp = Math.floor(Date.now() / 1000); /// bener timestampnya cuman kebanyakan 3 digit
  const data = consId + "&" + tStamp;

  const signature = Buffer.from(
    crypto.createHmac("SHA256", secret).update(data).digest()
  ).toString("base64");
  return {
    "X-cons-id": consId,
    "X-timestamp": tStamp,
    "X-signature": signature,
    user_key,
  };
};

// const options = {
//   host: "new-api.bpjs-kesehatan.go.id",
//   port: ":8080",
//   service: "new-vclaim-rest",
// };

// const options = {
//   host: "apijkn-dev.bpjs-kesehatan.go.id",
//   port: ":8888",
//   service: "antreanrs_dev",
// };
//apijkn-dev.bpjs-kesehatan.go.id/antreanrs_dev
//dvlp.bpjs-kesehatan.go.id:8888/arsws/rest/v1
//dvlp.bpjs-kesehatan.go.id:8888/arsws/rest/v2
//dvlp.bpjs-kesehatan.go.id/vclaim-rest-1.1

const options = {
  host: "dvlp.bpjs-kesehatan.go.id",
  port: ":8888",
  service: "vclaim-rest-1.1",
};

const aplicareOptions = {
  host: "dvlp.bpjs-kesehatan.go.id",
  port: ":8888",
  service: "aplicaresws",
};

//const uri = `https://${options.host}${options.port}/${options.service}/`;
const uri = `https://${options.host}/${options.service}/`;
const aplicareuri = `https://${aplicareOptions.host}${aplicareOptions.port}/${aplicareOptions.service}/`;

module.exports = {
  creatHeader,
  uri,
  aplicareuri,
};


listening at 3000
cari poli
https://dvlp.bpjs-kesehatan.go.id/vclaim-rest-1.1/referensi/poli/ANA
response:  qTxJchyWjP5Rz2PbAht2F3iZ489PcULGetmH9zAujham1wK6Jw3AMbdFELBV/Yc8+XjLYx6T0lNio5ci80vvg70cJ8PU8nKpbYkqesvy38YvOoBupD2wRyeqjSu2w9abZaKlPsefPGHxNGocVvNM+rnXWi2n4qN5YBFQK5KMQkFEvd3kNA8Ft1eEGT/WwetXEzAS/n0M4IHtnxCb+bKPzMLXD4eXIeHKZD0Zk+RanwRHAZszmekyVUCCEkGiDtdqiyNSTvtEHr/GyL3JaiIrxc7bkF7Qw64xt2dM/Xdq82jwi/+3LqPE05M1sUXOhUWqwAQqaP2d2ZoE0TgtqTQEcKjIkIPTUKScDl+YBnTBWb+FZ6coR5atettCPiELuztfDmKHxtqMYbMOy3xB6e8pGX9zn56MvaOtz5dJBH0Nn7m2NsQvKXmoZKvY9Mbeuc1A+bG/UdNQc/rKX2ehPGi7rUnaJptAZq10LLSANE9i2NpXcY2bjxRU7AYULqOYKGdBuSxa7bNgolgLM9CHISK3We/yb9iC7B+X4XrHhUk/tPy6eY2BFsvBPpVDmCeFdNo3pUI81l5N3tUDgDBW/xWV4mSstudJ53ULpeDu17Das0HWz2IZYzUWuBkMJOn/d3dQ6KxtAbZZ2YpxoUzCL3q/lQwtMwzvQDq1zjFYxYjoSnfPZnB5b5Gz0OuakYltgkTJLGaOtWOU9+6LzDRAAVAKiuQ1foHneOm1OFLJbI/aybo=
status:  200
statusText:  OK
selesai


cari poli
https://dvlp.bpjs-kesehatan.go.id/vclaim-rest-1.1/referensi/poli/ICU
response:  KWA7IqgFVNHUXFwD8xXSaJ1QJMVb6QTlWv5Dppr1RXqX6t8MdrjUKVjn4td+KPPM/JqCE8tqcbFmAkCQGBBy3HLNFz7XZ7uXehPcGMTHCfbp6Fhs+pSg9egiENXk6QB0
status:  200
statusText:  OK
selesai




  $jenis=$_GET['jenis'];
  $nomor=$_GET['nomor'];
  $tanggal=$_GET['tanggal'];
  

  $uri="https://dvlp.bpjs-kesehatan.go.id/vclaim-rest-1.1/Peserta/".$jenis."/".$nomor."/tglSEP/".$tanggal;

  $consID   = "xxxxx";
  $secretKey  = "xxxxxxxx";
  $stamp    = time();
  $data     = $consID.'&'.$stamp;
  $signature = hash_hmac('sha256', $data, $secretKey, true);
  $encodedSignature = base64_encode($signature);  
  
  $headers = array( 
        "Accept: application/json", 
        "X-cons-id:".$consID, 
        "X-timestamp: ".$stamp, 
        "X-signature: ".$encodedSignature
    ); 

  $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $uri);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    $season_data = curl_exec($ch);
    if (curl_errno($ch)) {
        print "Error: " . curl_error($ch);
        exit();
    }
    curl_close($ch);
  
   $data = json_decode($season_data, true);

  function stringDecrypt($string){
    $output = false;
    $encrypt_method = 'AES-256-CBC';
    global $consID, $secretKey, $stamp;
    $signature = $consID . $secretKey . $stamp;s
    // hash
    $key = hex2bin(hash('sha256', $signature));
      // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
    $iv = substr(hex2bin(hash('sha256', $signature)), 0, 16);
    $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, OPENSSL_RAW_DATA, $iv);
      return $output;
  }

// function lzstring decompress https://github.com/nullpunkt/lz-string-php
function decompress($string){
   return \LZCompressor\LZString::decompressFromEncodedURIComponent($string);
}

  $data["metaData"]['code'];
  if($data["metaData"]['code']=="200"){
    $text = $data["response"];
  $decrypted = stringDecrypt($text);
  echo decompress($decrypted);
  }else{
    echo $season_data;
  }